<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="VSLangProj"#>
<#
    DTE env = GetVSEnvironment();   
    
    env.StatusBar.Text = "Generating test classes...";
    
    var project = env.Solution.Projects.Cast<Project>().Where(p => p.Name == "ConsoleApp2023").FirstOrDefault();

    var projectName= project.Name;

    var counter = 0;

    //var namespace = project.Properties.Item("ConsoleApp2023").Value.ToString();

      foreach(EnvDTE.CodeElement element in project.CodeModel.CodeElements)
    {
      
        if (element.Kind == EnvDTE.vsCMElement.vsCMElementClass)
        {
            var myClass = (EnvDTE.CodeClass)element;
            // do stuff with that class here
            //counter++;
        }
        counter++;
    }

    #>

[TestClass] 
public class TestAllDaysOf<#= projectName #>
{

    public string test = "<#= counter #>";
}



 <#+
    private DTE GetVSEnvironment() {
            DTE env = null;
            var provider = Host as IServiceProvider;
            if (provider != null) {
                env = provider.GetService(typeof(DTE)) as DTE;
            }

            if (env == null) {
                throw new InvalidOperationException("Template must be executed from Visual Studio");
            }

            return env;
        }
#>